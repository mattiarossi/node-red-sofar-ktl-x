[
    {
        "id": "16c33b1e099682e0",
        "type": "subflow",
        "name": "sofar KTL-X",
        "info": "TCP server for LSW3 modbus client  \r\nused with Sofar solar KTL-X inverters\r\n\r\n### Outputs\r\n1. JSON data\r\n: payload (object) : parsed data object.\r\n: topic (string) : frame data type.\r\n\r\n2. debug\r\n: payload (buffer) : raw data from inverter.\r\n: topic (string) : message origin.\r\n: frameType (string) : frame data type.\r\n\r\n### Details\r\n\r\nDefault local server port:  \r\n`10000`\r\n\r\nDefault host IP:  \r\n`47.88.8.200` (`data1.solarmanpv.com`)  \r\nor  \r\n`115.29.186.234` (`data2.solarmanpv.com`)  \r\n\r\nDefault port nr:  \r\n`10000`\r\n\r\n### References\r\n\r\n - [GitHub](https://github.com/serek4/node-red-sofar-ktl-x) - the node github repository\r\n",
        "category": "",
        "in": [],
        "out": [
            {
                "x": 630,
                "y": 260,
                "wires": [
                    {
                        "id": "5d0553bafc1e3bf7",
                        "port": 0
                    }
                ]
            },
            {
                "x": 1150,
                "y": 260,
                "wires": [
                    {
                        "id": "a92085a4d10f12e6",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "localPort",
                "type": "num",
                "value": "10000",
                "ui": {
                    "icon": "font-awesome/fa-plug",
                    "label": {
                        "en-US": "local port"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "num",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "resend",
                "type": "bool",
                "value": "true",
                "ui": {
                    "label": {
                        "en-US": "forward data to remote server"
                    },
                    "type": "checkbox"
                }
            },
            {
                "name": "remoteHostIp",
                "type": "str",
                "value": "115.29.186.234",
                "ui": {
                    "icon": "font-awesome/fa-cloud-upload",
                    "label": {
                        "en-US": "remote ip"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "remoteHostPort",
                "type": "num",
                "value": "10000",
                "ui": {
                    "icon": "font-awesome/fa-plug",
                    "label": {
                        "en-US": "remote port"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "num",
                            "env"
                        ]
                    }
                }
            }
        ],
        "meta": {
            "version": "1.0.0",
            "author": "serek4",
            "desc": "sofar KTL-x with LSW3 wifi stick",
            "license": "MIT"
        },
        "color": "#20c800",
        "outputLabels": [
            "JSON data",
            "debug"
        ],
        "icon": "node-red/bridge-dash.svg",
        "status": {
            "x": 300,
            "y": 40,
            "wires": [
                {
                    "id": "7113cbe45845bb03",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "f0ad23cb42522771",
        "type": "tcp in",
        "z": "16c33b1e099682e0",
        "name": "Inverter stick out",
        "server": "server",
        "host": "",
        "port": "${localPort}",
        "datamode": "stream",
        "datatype": "buffer",
        "newline": "",
        "topic": "inverter",
        "base64": false,
        "tls": "",
        "x": 140,
        "y": 120,
        "wires": [
            [
                "5d0553bafc1e3bf7",
                "88b9df11c34f72ea",
                "a92085a4d10f12e6"
            ]
        ]
    },
    {
        "id": "164f421ec73701f9",
        "type": "tcp request",
        "z": "16c33b1e099682e0",
        "name": "Solarmanpv.com",
        "server": "",
        "port": "",
        "out": "time",
        "ret": "buffer",
        "splitc": "1000",
        "newline": "",
        "tls": "",
        "x": 810,
        "y": 160,
        "wires": [
            [
                "a92085a4d10f12e6"
            ]
        ]
    },
    {
        "id": "c511e8c8f7ced576",
        "type": "function",
        "z": "16c33b1e099682e0",
        "name": "generate response",
        "func": "const request = msg.payload;\n\nconst timestamp = Math.floor(Date.now() / 1000);\nconst timestampStr = timestamp.toString(16);\nconst timestampBuff = Buffer.from(timestamp.toString(16), 'hex');\n\nconst response = Buffer.alloc(23);\nresponse.writeUInt8(0xA5, 0x00);  // msg begin\n\nresponse.writeUInt8(0x0A, 0x01);    // msg length\nresponse.writeUInt8(0x00, 0x02);\n\nresponse.writeUInt8(0x10, 0x03);\nresponse.writeUInt8(responseType(request.readUInt8(0x04)), 0x04);  // match req type\n\nresponse.writeUInt8(request.readUInt8(0x05) + 0x01, 0x05); // get from req + 1\nresponse.writeUInt8(request.readUInt8(0x06), 0x06);  // get from req\n\nresponse.writeUInt32LE(request.readUInt32LE(0x07), 0x07);  // wifi SN - get from req\n\nresponse.writeUInt8(request.readUInt8(0x0B), 0x0B);  // get from req\nresponse.writeUInt8(0x01, 0x0C);\n\nresponse.writeUInt32LE(timestampBuff.readUInt32BE(0x00), 0x0D);  // timestamp\n\nresponse.writeUInt8(0x78, 0x11);\nresponse.writeUInt8(0x00, 0x12);\nresponse.writeUInt8(0x00, 0x13);\nresponse.writeUInt8(0x00, 0x14);\n\nresponse.writeUInt8(calculateChecksum(response), 0x15);  //checksum\nresponse.writeUInt8(0x15, 0x16);  // msg end\n\nmsg.payload = response;\nmsg.topic = 'local_server';\nreturn msg;\n\nfunction responseType(requestTypeByte) {\n    // node.warn(`req code: 0x${requestTypeByte.toString(16)}`);\n    let responseTypeByte = requestTypeByte - (0x30);\n    responseTypeByte = Math.min(Math.max(responseTypeByte, 0x00), 0xFF); //min 0x00 max 255\n    // switch(requestTypeByte) {\n    //     case 0x41:\n    //         responseTypeByte = 0x11;\n    //         break;\n    //     case 0x42:\n    //         responseTypeByte = 0x12;\n    //         break;\n    //     case 0x43:\n    //         responseTypeByte = 0x13;\n    //         break;\n    //     case 0x47:\n    //         responseTypeByte = 0x17;\n    //         break;\n    //     case 0x48:\n    //         responseTypeByte = 0x18;\n    //         break;\n    //     default:\n    //         responseTypeByte = 0xFF;\n    // }\n    // node.warn(`res code: 0x${responseTypeByte.toString(16)}`);\n    return responseTypeByte;\n}\nfunction calculateChecksum(message) {\n    message = message.slice(1, -2);\n    let sum = 0x0;\n    for (const key of message.keys()) {\n        sum += message[key];\n    }\n    sum = sum % 256;\n    // node.warn( sum.toString(16));\n    return sum;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 120,
        "wires": [
            [
                "95b6eef2f2bbf823",
                "a92085a4d10f12e6"
            ]
        ],
        "inputLabels": [
            "data from wifi stick"
        ],
        "outputLabels": [
            "response out"
        ]
    },
    {
        "id": "95b6eef2f2bbf823",
        "type": "tcp out",
        "z": "16c33b1e099682e0",
        "name": "Inverter stick response in",
        "host": "",
        "port": "10000",
        "beserver": "reply",
        "base64": false,
        "end": true,
        "tls": "",
        "x": 1090,
        "y": 120,
        "wires": []
    },
    {
        "id": "5d0553bafc1e3bf7",
        "type": "function",
        "z": "16c33b1e099682e0",
        "name": "decode msg",
        "func": "let buffer = msg.payload;\nlet data = {};\nswitch (buffer.length) {\n    case 164: // data\n        data.loggerSN = buffer.readUInt32LE(0x07);\n        data.sensorTypeList = readSensorTypeList(buffer.slice(0x0C, 0x0E));\n        data.tOperationTime = buffer.readUInt32LE(0x0E);\n        data.inverterSN = (buffer.toString('utf8', 0x20, 0x30)).trimEnd();\n        data.inverterTemp = buffer.readInt16LE(0x30) / 10;\n        data.VDC1 = buffer.readUInt16LE(0x32) / 10;\n        data.VDC2 = buffer.readUInt16LE(0x34) / 10;\n        data.IDC1 = buffer.readUInt16LE(0x36) / 10;\n        data.IDC2 = buffer.readUInt16LE(0x38) / 10;\n        data.IAC1 = buffer.readUInt16LE(0x3A) / 10;\n        data.IAC2 = buffer.readUInt16LE(0x3C) / 10;\n        data.IAC3 = buffer.readUInt16LE(0x3E) / 10;\n        data.VAC1 = buffer.readUInt16LE(0x40) / 10;\n        data.VAC2 = buffer.readUInt16LE(0x42) / 10;\n        data.VAC3 = buffer.readUInt16LE(0x44) / 10;\n        data.fAC = buffer.readUInt16LE(0x46) / 100;\n\n        data.currentPower = buffer.readUInt32LE(0x48);\n\n        data.eToday = buffer.readUInt32LE(0x4C) / 100;\n        data.eTotal = buffer.readUInt32LE(0x50) / 10;\n\n        data.hTotal = buffer.readUInt32LE(0x54);\n\n        data.inverterStatus = decodeInverterStatus(buffer.readUInt8(0x58));\n\n        data.loggerTemp = buffer.readInt16LE(0x70);\n        data.Vbus = buffer.readUInt16LE(0x72) / 10;\n        data.VCPU1 = buffer.readUInt16LE(0x74) / 10;\n        data.countdownTime = buffer.readUInt16LE(0x78);\n        data.PV1insulationResistance = buffer.readUInt16LE(0x7C);\n        data.PV2insulationRsistance = buffer.readUInt16LE(0x7E);\n        data.cathode_groundInsulationImpedance = buffer.readUInt16LE(0x80);\n        data.countryCode = buffer.readUInt16LE(0x82);\n        data.A_phaseDCdistribution = buffer.readUInt16LE(0x8A);\n        data.B_phaseDCdistribution = buffer.readUInt16LE(0x8C);\n        data.C_phaseDCdistribution = buffer.readUInt16LE(0x8E);\n\n        data.firmware = buffer.toString('utf8', 0x90, 0x94);\n\n        data.year = buffer.readUInt8(0x98);\n        data.month = buffer.readUInt8(0x99);\n        data.day = buffer.readUInt8(0x9A);\n        data.hour = buffer.readUInt8(0x9B);\n        data.minute = buffer.readUInt8(0x9C);\n        data.second = buffer.readUInt8(0x9D);\n\n        // node.warn(data);\n        return {\n            payload: data,\n            topic: 'data'\n        };\n        break;\n    case 99:   // hello message\n        data.loggerSN = buffer.readUInt32LE(0x07);\n        data.tOperationTime = buffer.readUInt32LE(0x0C);\n        data.uploadingFrequency = buffer.readUInt8(0x18);\n        data.dataLoggingFrequency = buffer.readUInt8(0x19);\n        data.heartbeatFrequency = buffer.readUInt8(0x1A);\n        data.commandType = buffer.readUInt8(0x1B);\n        data.signalQuality = buffer.readUInt8(0x1C);\n        data.sensorTypeNr = buffer.readUInt8(0x1D);\n        data.moduleVersion = buffer.toString('utf8', 0x1E, 0x46);\n        data.macAddress = readMacAddress(buffer.slice(0x46, 0x4C));\n        data.localIP = buffer.toString('utf8', 0x4C, 0x5B);\n        data.sensorTypeList = readSensorTypeList(buffer.slice(0x5F, 0x61));\n\n        // node.warn(data);\n        return {\n            payload: data,\n            topic: 'hello'\n        };\n        break;\n    case 41:   // hello_cd message\n        data.loggerSN = buffer.readUInt32LE(0x07);\n        data.totalOperationTime = buffer.readUInt32LE(0x0C);\n\n        // node.warn(data);\n        return {\n            payload: data,\n            topic: 'hello_cd'\n        };\n        break;\n    case 73:   // hello_end message\n        data.loggerSN = buffer.readUInt32LE(0x07);\n        data.totalOperationTime = buffer.readUInt32LE(0x0C);\n\n        // node.warn(data);\n        return {\n            payload: data,\n            topic: 'hello_end'\n        };\n        break;\n\n    default:\n        // node.warn(buffer.length);\n        return null\n        break;\n}\n\nfunction readMacAddress(buffer) {\n    let macAddressStr = '';\n    for (let buff of buffer) {\n        // node.warn(buff.toString(16));\n        macAddressStr += `${`0${(buff.toString(16))}`.slice(-2)}:`;\n    }\n    return macAddressStr.substring(0, 17);\n}\nfunction readSensorTypeList(buffer) {\n    let SensorTypeListStr = `${`0${(buffer[1].toString(16))}`.slice(-2)}`;\n    SensorTypeListStr += `${`0${(buffer[0].toString(16))}`.slice(-2)}`;\n    return SensorTypeListStr;\n}\n\nfunction decodeInverterStatus(status) {\n    switch (status) {\n        case 0x00:\n            return `standby`;\n        case 0x02:\n            return `normal`;\n        case 0x03:\n            return `fault`;\n        case 0x04:\n            return `permanent`;\n        default:\n            return `0x${`0${(status.toString(16))}`.slice(-2)}`;\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 260,
        "wires": [
            []
        ],
        "inputLabels": [
            "wifi stick buffer in"
        ],
        "outputLabels": [
            "decoded message object"
        ]
    },
    {
        "id": "28fb73099b82097a",
        "type": "change",
        "z": "16c33b1e099682e0",
        "name": "set host and port",
        "rules": [
            {
                "t": "set",
                "p": "host",
                "pt": "msg",
                "to": "remoteHostIp",
                "tot": "env"
            },
            {
                "t": "set",
                "p": "port",
                "pt": "msg",
                "to": "remoteHostPort",
                "tot": "env"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "remote_server",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 610,
        "y": 160,
        "wires": [
            [
                "164f421ec73701f9"
            ]
        ]
    },
    {
        "id": "88b9df11c34f72ea",
        "type": "switch",
        "z": "16c33b1e099682e0",
        "name": "",
        "property": "resend",
        "propertyType": "env",
        "rules": [
            {
                "t": "istype",
                "v": "boolean",
                "vt": "boolean"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 430,
        "y": 120,
        "wires": [
            [
                "c511e8c8f7ced576"
            ],
            [
                "28fb73099b82097a"
            ]
        ],
        "inputLabels": [
            "inverter data"
        ],
        "outputLabels": [
            "local server only",
            "remote server"
        ]
    },
    {
        "id": "7113cbe45845bb03",
        "type": "status",
        "z": "16c33b1e099682e0",
        "name": "",
        "scope": [
            "f0ad23cb42522771"
        ],
        "x": 160,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "a92085a4d10f12e6",
        "type": "function",
        "z": "16c33b1e099682e0",
        "name": "add msg.frameType",
        "func": "let frameType = '';\nswitch(msg.payload.length) {\n    case 99:\n      frameType = 'hello(99)';\n      break;\n    case 23:\n      frameType = 'srv_res(23)';\n      break;\n    case 164:\n      frameType = 'data(164)';\n      break;\n    case 14:\n      frameType = 'heartbeat(14)';\n      break;\n    case 41:\n      frameType = 'hello_cd(41)';\n      break;\n    case 73:\n      frameType = 'hello_end(73)';\n      break;\n    default:\n      frameType = `unknown(${msg.payload.length})`;\n      break;\n}\nmsg.frameType = frameType;\n// delete TCP nodes properties\ndelete msg.ip;\ndelete msg.host;\ndelete msg.port;\ndelete msg._session;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 260,
        "wires": [
            []
        ]
    }
]